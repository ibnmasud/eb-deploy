{"version":3,"sources":["lib/utils.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACzB,IAAM,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;AACvB,IAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAClC,IAAM,IAAI,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC;;AAE3C,SAAS,kBAAkB,GAAG;AAC5B,MAAI,QAAQ,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;;AAEzB,IAAE,CAAC,KAAK,CAAC,aAAa,EAAE,UAAS,GAAG,EAAE,KAAK,EAAE;AACzC,QAAI,CAAC,GAAG,IAAI,KAAK,CAAC,WAAW,EAAE,EAAE;AAC7B,aAAO,QAAQ,CAAC,OAAO,EAAE,CAAC;KAC7B,MACI;AACH,QAAE,CAAC,KAAK,CAAC,aAAa,EAAE,UAAS,GAAG,EAAE;AACpC,YAAG,GAAG,EAAE;AACN,iBAAO,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAC7B;AACD,eAAO,QAAQ,CAAC,OAAO,EAAE,CAAC;OAC3B,CAAC,CAAC;KACJ;GACJ,CAAC,CAAC;;AAEH,SAAO,QAAQ,CAAC,OAAO,CAAC;CAEzB;;AAED,SAAS,SAAS,GAAG;;AAEnB,MAAI,QAAQ,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;;AAEzB,QAAM,CAAC,GAAG,CAAC,UAAS,MAAM,EAAE;AAC1B,YAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;GAC1B,CAAC,CAAC;;AAEH,SAAO,QAAQ,CAAC,OAAO,CAAC;CAEzB;;AAED,SAAS,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE;;AAEtC,MAAI,QAAQ,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;;AAEzB,MAAM,KAAK,GAAG,IAAI,CAAC,6BAA6B,GAAG,OAAO,GAAG,OAAO,GAAG,MAAM,EAAE,UAAS,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE;AAC3G,QAAI,GAAG,EAAE;AACP,aAAO,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;KAC7B;AACD,WAAO,QAAQ,CAAC,OAAO,EAAE,CAAC;GAC3B,CAAC,CAAC;;AAEH,SAAO,QAAQ,CAAC,OAAO,CAAC;CAEzB,CAAC;;AAEF,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC;AAC9B,OAAO,CAAC,aAAa,GAAG,aAAa,CAAC;AACtC,OAAO,CAAC,kBAAkB,GAAG,kBAAkB,CAAC","file":"lib/utils.js","sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst Q = require('q');\nconst gitRev = require('git-rev');\nconst exec = require('child_process').exec;\n\nfunction makeVersionsFolder() {\n  let deferred = Q.defer();\n\n  fs.lstat('./.versions', function(err, stats) {\n      if (!err && stats.isDirectory()) {\n          return deferred.resolve();\n      }\n      else {\n        fs.mkdir('./.versions', function(err) {\n          if(err) {\n            return deferred.reject(err);\n          }\n          return deferred.resolve();\n        });\n      }\n  });\n\n  return deferred.promise;\n\n}\n\nfunction getGitTag() {\n\n  let deferred = Q.defer();\n\n  gitRev.tag(function(tagStr) {\n    deferred.resolve(tagStr);\n  });\n\n  return deferred.promise;\n\n}\n\nfunction createArchive(branch, version) {\n\n  let deferred = Q.defer();\n\n  const child = exec('git archive -o ./.versions/' + version + '.zip ' + branch, function(err, stdout, stderr) {\n    if (err) {\n      return deferred.reject(err);\n    }\n    return deferred.resolve();\n  });\n\n  return deferred.promise;\n\n};\n\nexports.getGitTag = getGitTag;\nexports.createArchive = createArchive;\nexports.makeVersionsFolder = makeVersionsFolder;\n"],"sourceRoot":"/source/"}