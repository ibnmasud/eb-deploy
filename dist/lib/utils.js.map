{"version":3,"sources":["lib/utils.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACzB,IAAM,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;AACvB,IAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAClC,IAAM,IAAI,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC;AAC3C,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;AAE7B,SAAS,kBAAkB,GAAG;AAC5B,MAAI,QAAQ,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;;AAEzB,IAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,WAAW,CAAC,EAAE,UAAS,GAAG,EAAE,KAAK,EAAE;AACjE,QAAI,CAAC,GAAG,IAAI,KAAK,CAAC,WAAW,EAAE,EAAE;AAC7B,aAAO,QAAQ,CAAC,OAAO,EAAE,CAAC;KAC7B,MACI;AACH,QAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,WAAW,CAAC,EAAE,UAAS,GAAG,EAAE;AAC5D,YAAG,GAAG,EAAE;AACN,iBAAO,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAC7B;AACD,eAAO,QAAQ,CAAC,OAAO,EAAE,CAAC;OAC3B,CAAC,CAAC;KACJ;GACJ,CAAC,CAAC;;AAEH,SAAO,QAAQ,CAAC,OAAO,CAAC;CAEzB;;AAED,SAAS,SAAS,GAAG;;AAEnB,MAAI,QAAQ,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;;AAEzB,QAAM,CAAC,GAAG,CAAC,UAAS,MAAM,EAAE;AAC1B,YAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;GAC1B,CAAC,CAAC;;AAEH,SAAO,QAAQ,CAAC,OAAO,CAAC;CAEzB;;AAED,SAAS,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE;;AAEtC,MAAI,QAAQ,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;AACzB,SAAO,CAAC,GAAG,CAAC,8CAA8C,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,GAAG,OAAO,GAAG,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC;;AAE7H,MAAM,KAAK,GAAG,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,GAAG,OAAO,GAAG,MAAM,CAAC,GAAG,GAAG,GAAG,MAAM,EAAE,UAAS,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE;AAC9I,WAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACpB,WAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AACtB,QAAI,GAAG,EAAE;AACP,aAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACjB,aAAO,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;KAC7B;AACD,WAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AAC3B,WAAO,QAAQ,CAAC,OAAO,EAAE,CAAC;GAC3B,CAAC,CAAC;;AAEH,SAAO,QAAQ,CAAC,OAAO,CAAC;CAEzB,CAAC;;AAEF,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC;AAC9B,OAAO,CAAC,aAAa,GAAG,aAAa,CAAC;AACtC,OAAO,CAAC,kBAAkB,GAAG,kBAAkB,CAAC","file":"lib/utils.js","sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst Q = require('q');\nconst gitRev = require('git-rev');\nconst exec = require('child_process').exec;\nconst path = require('path');\n\nfunction makeVersionsFolder() {\n  let deferred = Q.defer();\n\n  fs.lstat(path.join(process.cwd(), '.versions'), function(err, stats) {\n      if (!err && stats.isDirectory()) {\n          return deferred.resolve();\n      }\n      else {\n        fs.mkdir(path.join(process.cwd(), '.versions'), function(err) {\n          if(err) {\n            return deferred.reject(err);\n          }\n          return deferred.resolve();\n        });\n      }\n  });\n\n  return deferred.promise;\n\n}\n\nfunction getGitTag() {\n\n  let deferred = Q.defer();\n\n  gitRev.tag(function(tagStr) {\n    deferred.resolve(tagStr);\n  });\n\n  return deferred.promise;\n\n}\n\nfunction createArchive(branch, version) {\n\n  let deferred = Q.defer();\n  console.log('Creating project archive @ %s from branch %s', path.join(process.cwd(), 'release.' + version + '.zip'), branch);\n\n  const child = exec('git archive -v -o ' + path.join(process.cwd(), 'release.' + version + '.zip') + ' ' + branch, function(err, stdout, stderr) {\n    console.log(stdout);\n    console.error(stderr);\n    if (err) {\n      console.log(err);\n      return deferred.reject(err);\n    }\n    console.log('Zip created');\n    return deferred.resolve();\n  });\n\n  return deferred.promise;\n\n};\n\nexports.getGitTag = getGitTag;\nexports.createArchive = createArchive;\nexports.makeVersionsFolder = makeVersionsFolder;\n"],"sourceRoot":"/source/"}