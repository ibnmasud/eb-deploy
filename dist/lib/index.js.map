{"version":3,"sources":["lib/index.js"],"names":[],"mappings":"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","file":"lib/index.js","sourcesContent":["const ebArgs = require('commander');\nconst ElasticBeanstalk = require('elastic-beanstalk.js');\n\nconst utils = require('./utils');\n\nconst ebDeploy = require('root-require')('./package.json');\nconst version = ebDeploy.version;\n//const devCreds = require('root-require')('./creds.json'); \n\n// Set up command line args\nebArgs\n  .version(version)\n  .option('-a, --accessKeyId <key>', 'Set AWS Access Key')\n  .option('-s, --secretAccessKey <key>', 'Set AWS Secret Access Key')\n  .option('-r, --region', 'Set AWS Region [eu-west-1]', 'eu-west-1')\n  .option('-A, --applicationName <name>', 'The name of your Elastic Beanstalk Application [my-app]', 'my-app')\n  .option('-e, --environment <name>', 'Which environment should this application be deployed to? [environment]', 'my-environment')\n  .option('-b, --bucketName <name>', 'The name of the *existing* S3 bucket to store your version [my-bucket]', 'my-bucket')\n  .option('-p, --packageLocation', 'Location of package.json if not ./package.json')\n  .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble')\n  .parse(process.argv);\n\n// Check arguments\n/*\n// Back out if we've not set the required keys\nif(!ebArgs.accessKeyId) {\n  console.error('AWS Access Key must be set!');\n  process.exit(1);\n}\n\nif(!ebArgs.secretAccessKey) {\n  console.error('AWS Secret Access Key must be set!');\n  process.exit(1);\n}\n*/\n\n// All projects require a package.json\ntry {\n  const packageInfo = require('root-require')('./package.json');\n}\ncatch(e) {\n  console.error('No package.json found, exiting');\n  console.error(e);\n  process.exit(1);\n}\n\nconst project = {\n  name: (ebArgs.applicationName || packageInfo.name || 'my-app')\n};\n\n// Create the Elastic Beanstalk client\nconst elasticBeanstalk = new ElasticBeanstalk({\n  aws: {\n    accessKeyId: ebArgs.accessKeyId,\n    secretAccessKey: ebArgs.secretAccessKey,\n    region: ebArgs.region || 'eu-west-1',\n    applicationName: ebArgs.applicationName || 'my-app',\n    versionsBucket: ebArgs.bucketName || 'mubaloo-ecs-config'\n  }\n});\n\n// Create the archive\nutils.makeVersionsFolder()\n  .then(function() {\n    return utils.getGitTag()\n  })\n  .then(function(tag) {\n    project.version = tag;\n    return utils.createArchive('master', tag)\n  })\n  .then(function() {\n    return elasticBeanstalk.createVersionAndDeploy({\n      environment: ebArgs.environment,\n      filename: './.versions/' + project.version + '.zip',\n      remoteFilename: project.name + '_' + project.version + '.zip',\n      versionLabel: project.version\n    });\n  })\n  .then(function() {\n    console.log('Successfully deployed ' + project.name + ' (' + project.version + ') to EB');\n  })\n  .fail(function(error) {\n    console.error(error);\n  })\n"],"sourceRoot":"/source/"}